name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Sync dependencies
        run: uv pip sync requirements.txt requirements-dev.txt

      - name: Lint and format (ruff)
        run: |
          python -m ruff format --check .
          python -m ruff check .

      - name: Type check (mypy)
        run: python -m mypy . --strict

      - name: Unit tests
        run: python -m pytest

      - name: Dependency security scan (safety)
        run: python -m safety check || true

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install pip-audit
        run: python -m uv tool install pip-audit

      - name: Run pip-audit security scan
        run: |
          # Install project dependencies first
          uv pip sync requirements.txt requirements-dev.txt

          # Run comprehensive security audit
          pip-audit --strict --desc on-error --cache-dir ~/.cache/pip-audit

          # Also check for known vulnerable packages in requirements
          echo "🔍 Checking requirements.txt for known vulnerabilities..."
          pip-audit --requirement requirements.txt --strict --desc on-error --cache-dir ~/.cache/pip-audit

      - name: Check for outdated dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."
          pip list --outdated --format=json | python -c "
          import json
          import sys
          try:
              data = json.load(sys.stdin)
              if data:
                  print(f'⚠️  Found {len(data)} outdated packages:')
                  for pkg in data[:10]:  # Show first 10
                      print(f'  - {pkg[\"name\"]}: {pkg[\"version\"]} → {pkg[\"latest_version\"]}')
                  if len(data) > 10:
                      print(f'  ... and {len(data) - 10} more')
              else:
                  print('✅ All dependencies are up to date')
          except:
              print('✅ No outdated dependencies found')
          "

      - name: Security audit summary
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ pip-audit scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency vulnerability check passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Outdated package analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Security Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly update dependencies using \`uv lock --upgrade\`" >> $GITHUB_STEP_SUMMARY
          echo "- Review and update requirements.txt periodically" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor [PyPI Advisory Database](https://github.com/pypa/advisory-database) for new vulnerabilities" >> $GITHUB_STEP_SUMMARY
