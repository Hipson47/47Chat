name: 🚀 Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_release_type:
        description: 'Force release type (major, minor, patch, prerelease)'
        required: false
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

env:
  PYTHON_VERSION: "3.11"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 📦 Install dependencies
        run: |
          uv pip install --system -e .[dev]

      - name: 🧪 Run tests
        run: |
          python -m pytest -x --cov=backend --cov=frontend --cov-report=term-missing --cov-fail-under=85

      - name: 🔍 Run linting and type checking
        run: |
          python -m ruff check .
          python -m mypy .

      - name: 🔒 Security audit
        run: |
          python -m safety check || true

      - name: 📦 Build distribution packages
        run: |
          python -m pip install build
          python -m build

      - name: 🚀 Run semantic release
        id: semantic-release
        run: |
          # Configure git for semantic release
          git config --global user.name "semantic-release[bot]"
          git config --global user.email "semantic-release[bot]@users.noreply.github.com"

          # Run semantic release
          if [ -n "${{ github.event.inputs.force_release_type }}" ]; then
            echo "Forcing release type: ${{ github.event.inputs.force_release_type }}"
            semantic-release --patch || semantic-release --minor || semantic-release --major
          else
            semantic-release
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: semantic-release[bot]
          GIT_AUTHOR_EMAIL: semantic-release[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: semantic-release[bot]
          GIT_COMMITTER_EMAIL: semantic-release[bot]@users.noreply.github.com

      - name: 📤 Upload build artifacts
        if: steps.semantic-release.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30

      - name: 📋 Generate release summary
        if: steps.semantic-release.outcome == 'success'
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "📦 **Latest Release:** $LATEST_TAG" >> $GITHUB_STEP_SUMMARY

          # Show changelog excerpt if available
          if [ -f "CHANGELOG.md" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📝 Recent Changes" >> $GITHUB_STEP_SUMMARY
            head -20 CHANGELOG.md | tail -15 >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 PyPI Package](https://pypi.org/project/47chat/)" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Full Changelog](CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🐛 Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'chore(release):')
    permissions:
      id-token: write

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: 🎊 Post-release notification
        run: |
          echo "## 🚀 Successfully Published to PyPI!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The package has been published to PyPI and is now available for installation:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install 47chat" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  validate-release:
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: ✅ Validate release
        run: |
          echo "## 🔍 Release Validation" >> $GITHUB_STEP_SUMMARY

          # Check if version was updated
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || echo "unknown")
          echo "📦 **Current Version:** $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY

          # Check if changelog was updated
          if [ -f "CHANGELOG.md" ]; then
            echo "✅ **Changelog:** Updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Changelog:** Missing" >> $GITHUB_STEP_SUMMARY
          fi

          # Check if tag was created
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          if [ "$LATEST_TAG" != "none" ]; then
            echo "🏷️ **Latest Tag:** $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tag:** Not created" >> $GITHUB_STEP_SUMMARY
          fi

          # Check if release was created
          RELEASE_COUNT=$(gh release list --limit 1 | wc -l)
          if [ "$RELEASE_COUNT" -gt 0 ]; then
            echo "🚀 **GitHub Release:** Created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub Release:** Not created" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🧪 Post-release testing
        run: |
          # Test that the package can be installed from the latest release
          echo "Testing package installation..."

          # This would test installation from PyPI in a real scenario
          # For now, just validate the package structure
          if [ -d "dist" ]; then
            echo "✅ **Build Artifacts:** Present"
            ls -la dist/
          else
            echo "❌ **Build Artifacts:** Missing"
          fi
